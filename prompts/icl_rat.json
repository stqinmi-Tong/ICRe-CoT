{
   "chat": {
        "first_give_demonstration": "You are a good assistant to perform link prediction and sorting. Given a goal question and a list of candidate answers of this question. Your need to order these candidate answers in the list to let candiate answers which are more possible to be the answer of the question more prior.\nThe goal question is: {question}. To sort the candidate answers, typically you would need to refer to some other examples that may be similar to or related to the question.\n Part of given examples are similar to the goal question, you should analogy them to understand potential meaning of the goal question. Another part of given facts contain supplementary information, keep capturing these extra information and mining potential relationships among them to help the sorting. Please carfully read, relize and thinking about these examples. Summarize the way of thinking in these examples and memorize the information you think maybe helphul to your sorting task. During I give examples please keep silent until I let you output.",
        "analogy_demonstration": "Examples used to Analogy: \"{selected_analogy_demonstrations}\" Keep thinking but not output.",
        "supplement_demonstration":"Examples give supplement information: \"{selected_supplement_demonstrations}\". Keep thinking but not output.",
        "init_draft": "The list of candidate answers is {order_of_candidate}. And the question is {question}. Now, based on the previous examples and your own knowledge and thinking, sort the list to let the candidate answers which are more possible to be the true answer of the question more prior.\n**Instructions:**\n1. To sort the candidate answers with step-by-step thoughts and think in exactly 2 steps.\n2. Write each step in its own paragraph, each step must start with the tag: \"### Step 1:\", \"### Step 2:\".\n3. Output the sorted order of candidate answers using the format \"[most possible answer | second possible answer | ... | least possible answer]\" and please start your response with \"The final order:\". \n4. Do not add new answers that are not in the list.",
        "query_generation": "Your task is to generate search queries to verify the correctness of a given content with respect to a question.\nThe question is: {question},\nThe content is: {answer}\n**Instructions:**\n1.Extract key entities, attributes, and important phrases from the question and content that are necessary to verify its correctness.\n2.For each extracted entity or attribute, generate a short natural language query that can be used to retrieve relevant knowledge from a knowledge base. Each query should be focused on a single entity or attribute.\n3.Each query should be short (under 10 words), specific, and suitable for embedding-based retrieval. \n4.Output all queries as valid JSON array.Do NOT add any explanation, prefix, or extra text.",
        "revise": "Your task is to revise the answer according to the retrieved content in the local knowledge graph.\nQuestion: {question},\nRetrieved content: {content}\nOriginal answer: {answer}\n**Instructions:**\n1. Check whether the answer is correct according to the related content.\n2. If the answer contains errors, revise it to make it correct.\n3. If you believe right answers are not in the candidates list, add them in the list only when these answers are entity you can find from retrieved content. \n4. If the answer is already correct and complete, output it.\n5. Preserve the original paragraph structure and subtitles.\n6. Output only the revised answer. Do not add explanations or comments. ",
        "final_query_template": "The list of candidate answers is {order_of_candidate}. And the question is {question}. Now, based on the previous examples and step by step revise and thinking procedure {CoT} and your own knowledge and thinking, sort the list to let the candidate answers which are more possible to be the true answer of the question more prior. Output the sorted order of candidate answers using the format \"[most possible answer | second possible answer | ... | least possible answer]\" and please start your response with \"The final order:\". Do not output anything except the final order. Note your output sorted order should contain all the candidates in the list but not add new answer to it.",
        "directly_ask": "The list of candidate answers is {order_of_candidate}. And the question is {question}. Now, based on the previous examples and your own knowledge and thinking, sort the list to let the candidate answers which are more possible to be the true answer of the question more prior. Output the sorted order of candidate answers using the format \"[most possible answer | second possible answer | ... | least possible answer]\" and please start your response with \"The final order:\". Do not output anything except the final order. Note your output sorted order should contain all the candidates in the list but not add new answer to it."
    }
}